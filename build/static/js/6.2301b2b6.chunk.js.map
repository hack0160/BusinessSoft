{"version":3,"sources":["dataProvider/graphql.js"],"names":["customBuildQuery","introspectionResults","buildQuery","buildQueryFactory","type","resource","params","DELETE","query","gql","variables","id","parseResponse","data","Error","buildApolloClient","clientOptions","uri","introspection","operationNames","name","then","dataProvider","getGqlResource"],"mappings":"yMA8BMA,EAAmB,SAAAC,GACrB,IAAMC,EAAaC,YAAkBF,GAErC,OAAO,SAACG,EAAMC,EAAUC,GACpB,OAAIF,IAASG,IACF,CACHC,MAAOC,IAAF,kHAAuBJ,EAChBA,GAEZK,UAAW,CAACC,GAAIL,EAAOK,IACvBC,cAAe,YACX,GADuB,EAAVC,KACJ,SAAD,OAAUR,IACd,MAAO,CAACQ,KAAM,CAACF,GAAIL,EAAOK,KAG9B,MAAM,IAAIG,MAAJ,2BAA8BT,MAKzCH,EAAWE,EAAMC,EAAUC,KAI3B,qBACX,OAAOS,YAAkB,CACrBC,cAAe,CACXC,IAAK,iCAETC,cAAe,CACXC,eAAe,eACVZ,KAAS,SAAAF,GAAQ,sBAAaA,EAASe,UAGhDlB,WAAYF,IACbqB,MAAK,SAAAC,GAAY,OAAI,SAAClB,EAAMC,EAAUC,GAAjB,OACtBgB,EAAalB,EA7DI,SAAAC,GACnB,OAAQA,GACJ,IAAK,YACD,MAAO,WAEX,IAAK,aACD,MAAO,WAEX,IAAK,WACD,MAAO,UAEX,IAAK,WACD,MAAO,UAEX,IAAK,UACD,MAAO,SAEX,IAAK,WACD,MAAO,UAEX,QACI,MAAM,IAAIS,MAAJ,2BAA8BT,KAwCvBkB,CAAelB,GAAWC","file":"static/js/6.2301b2b6.chunk.js","sourcesContent":["import buildApolloClient, {\r\n    buildQuery as buildQueryFactory,\r\n} from 'ra-data-graphql-simple';\r\nimport { DELETE } from 'ra-core';\r\nimport gql from 'graphql-tag';\r\nconst getGqlResource = resource => {\r\n    switch (resource) {\r\n        case 'customers':\r\n            return 'Customer';\r\n\r\n        case 'categories':\r\n            return 'Category';\r\n\r\n        case 'commands':\r\n            return 'Command';\r\n\r\n        case 'products':\r\n            return 'Product';\r\n\r\n        case 'reviews':\r\n            return 'Review';\r\n\r\n        case 'invoices':\r\n            return 'Invoice';\r\n\r\n        default:\r\n            throw new Error(`Unknown resource ${resource}`);\r\n    }\r\n};\r\n\r\nconst customBuildQuery = introspectionResults => {\r\n    const buildQuery = buildQueryFactory(introspectionResults);\r\n\r\n    return (type, resource, params) => {\r\n        if (type === DELETE) {\r\n            return {\r\n                query: gql`mutation remove${resource}($id: ID!) {\r\n                    remove${resource}(id: $id)\r\n                }`,\r\n                variables: {id: params.id},\r\n                parseResponse: ({data}) => {\r\n                    if (data[`remove${resource}`]) {\r\n                        return {data: {id: params.id}};\r\n                    }\r\n\r\n                    throw new Error(`Could not delete ${resource}`);\r\n                },\r\n            };\r\n        }\r\n\r\n        return buildQuery(type, resource, params);\r\n    };\r\n};\r\n\r\nexport default () => {\r\n    return buildApolloClient({\r\n        clientOptions: {\r\n            uri: 'http://localhost:4000/graphql',\r\n        },\r\n        introspection: {\r\n            operationNames: {\r\n                [DELETE]: resource => `remove${resource.name}`,\r\n        },\r\n        },\r\n        buildQuery: customBuildQuery,\r\n    }).then(dataProvider => (type, resource, params) =>\r\n      dataProvider(type, getGqlResource(resource), params)\r\n    );\r\n};\r\n"],"sourceRoot":""}